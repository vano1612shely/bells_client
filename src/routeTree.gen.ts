/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrderIndexRouteImport } from './routes/order/index'
import { Route as OrderOrderIdRouteImport } from './routes/order/$orderId'
import { Route as AdminLoginRouteImport } from './routes/admin/login'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'
import { Route as AdminDashboardIndexRouteImport } from './routes/admin/dashboard/index'
import { Route as AdminDashboardProductsRouteImport } from './routes/admin/dashboard/products'
import { Route as AdminDashboardDiscountRouteImport } from './routes/admin/dashboard/discount'

const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrderIndexRoute = OrderIndexRouteImport.update({
  id: '/order/',
  path: '/order/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrderOrderIdRoute = OrderOrderIdRouteImport.update({
  id: '/order/$orderId',
  path: '/order/$orderId',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminLoginRoute = AdminLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDashboardIndexRoute = AdminDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminDashboardRoute,
} as any)
const AdminDashboardProductsRoute = AdminDashboardProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => AdminDashboardRoute,
} as any)
const AdminDashboardDiscountRoute = AdminDashboardDiscountRouteImport.update({
  id: '/discount',
  path: '/discount',
  getParentRoute: () => AdminDashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRouteWithChildren
  '/admin/login': typeof AdminLoginRoute
  '/order/$orderId': typeof OrderOrderIdRoute
  '/order': typeof OrderIndexRoute
  '/admin/dashboard/discount': typeof AdminDashboardDiscountRoute
  '/admin/dashboard/products': typeof AdminDashboardProductsRoute
  '/admin/dashboard/': typeof AdminDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/login': typeof AdminLoginRoute
  '/order/$orderId': typeof OrderOrderIdRoute
  '/order': typeof OrderIndexRoute
  '/admin/dashboard/discount': typeof AdminDashboardDiscountRoute
  '/admin/dashboard/products': typeof AdminDashboardProductsRoute
  '/admin/dashboard': typeof AdminDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRouteWithChildren
  '/admin/login': typeof AdminLoginRoute
  '/order/$orderId': typeof OrderOrderIdRoute
  '/order/': typeof OrderIndexRoute
  '/admin/dashboard/discount': typeof AdminDashboardDiscountRoute
  '/admin/dashboard/products': typeof AdminDashboardProductsRoute
  '/admin/dashboard/': typeof AdminDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/dashboard'
    | '/admin/login'
    | '/order/$orderId'
    | '/order'
    | '/admin/dashboard/discount'
    | '/admin/dashboard/products'
    | '/admin/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/admin/login'
    | '/order/$orderId'
    | '/order'
    | '/admin/dashboard/discount'
    | '/admin/dashboard/products'
    | '/admin/dashboard'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin/dashboard'
    | '/admin/login'
    | '/order/$orderId'
    | '/order/'
    | '/admin/dashboard/discount'
    | '/admin/dashboard/products'
    | '/admin/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  OrderOrderIdRoute: typeof OrderOrderIdRoute
  OrderIndexRoute: typeof OrderIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/order/': {
      id: '/order/'
      path: '/order'
      fullPath: '/order'
      preLoaderRoute: typeof OrderIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/order/$orderId': {
      id: '/order/$orderId'
      path: '/order/$orderId'
      fullPath: '/order/$orderId'
      preLoaderRoute: typeof OrderOrderIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/login': {
      id: '/admin/login'
      path: '/login'
      fullPath: '/admin/login'
      preLoaderRoute: typeof AdminLoginRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/dashboard/': {
      id: '/admin/dashboard/'
      path: '/'
      fullPath: '/admin/dashboard/'
      preLoaderRoute: typeof AdminDashboardIndexRouteImport
      parentRoute: typeof AdminDashboardRoute
    }
    '/admin/dashboard/products': {
      id: '/admin/dashboard/products'
      path: '/products'
      fullPath: '/admin/dashboard/products'
      preLoaderRoute: typeof AdminDashboardProductsRouteImport
      parentRoute: typeof AdminDashboardRoute
    }
    '/admin/dashboard/discount': {
      id: '/admin/dashboard/discount'
      path: '/discount'
      fullPath: '/admin/dashboard/discount'
      preLoaderRoute: typeof AdminDashboardDiscountRouteImport
      parentRoute: typeof AdminDashboardRoute
    }
  }
}

interface AdminDashboardRouteChildren {
  AdminDashboardDiscountRoute: typeof AdminDashboardDiscountRoute
  AdminDashboardProductsRoute: typeof AdminDashboardProductsRoute
  AdminDashboardIndexRoute: typeof AdminDashboardIndexRoute
}

const AdminDashboardRouteChildren: AdminDashboardRouteChildren = {
  AdminDashboardDiscountRoute: AdminDashboardDiscountRoute,
  AdminDashboardProductsRoute: AdminDashboardProductsRoute,
  AdminDashboardIndexRoute: AdminDashboardIndexRoute,
}

const AdminDashboardRouteWithChildren = AdminDashboardRoute._addFileChildren(
  AdminDashboardRouteChildren,
)

interface AdminRouteChildren {
  AdminDashboardRoute: typeof AdminDashboardRouteWithChildren
  AdminLoginRoute: typeof AdminLoginRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminDashboardRoute: AdminDashboardRouteWithChildren,
  AdminLoginRoute: AdminLoginRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  OrderOrderIdRoute: OrderOrderIdRoute,
  OrderIndexRoute: OrderIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
